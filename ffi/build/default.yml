# Taken from https://github.com/crate-ci/azure-pipelines/blob/master/default.yml
#
# The default file there builds with all/no-features, which won't work
# for us since we have platform specific features.

parameters:
  minrust: 1.32.0 # Rust 2018 with uniform paths
  setup: []
  services: {}
  env: {}
  cross: true

jobs:
# - job: style
#   displayName: Style linting
#   strategy:
#     matrix:
#       # stable:
#       #   rust: stable
#       # beta:
#       #   rust: beta
#       nightly:
#         rust: nightly
#   pool:
#     vmImage: ubuntu-latest
#   continueOnError: true
#   steps:
#     - template: install-rust.yml@templates
#       parameters:
#         rust: $(rust)
#         components:
#           - rustfmt
#           - clippy
#     # Run any user-specific setup steps
#     - ${{ parameters.setup }}
#     - script: cargo fmt --all -- --check
#       displayName: cargo fmt --check
#     - script: cargo clippy --all
#       displayName: cargo clippy
 - job: main
   displayName: Compile and test
   dependsOn: []
   ${{ if eq('true', parameters.cross) }}:
     strategy:
       matrix:
#         "Linux (nightly)":
#           vmImage: ubuntu-latest
#           rust: nightly
#         "Linux (beta)":
#           vmImage: ubuntu-latest
#           rust: beta
         Linux:
           vmImage: ubuntu-latest
           rust: stable
         MacOS:
           vmImage: macOS-latest
           rust: stable
         Windows:
           vmImage: windows-latest
           rust: stable
   ${{ if ne('true', parameters.cross) }}:
     strategy:
       matrix:
         "Linux (nightly)":
           vmImage: ubuntu-latest
           rust: nightly
         "Linux (beta)":
           vmImage: ubuntu-latest
           rust: beta
         Linux:
           vmImage: ubuntu-latest
           rust: stable
   pool:
     vmImage: $(vmImage)
   services:
     ${{ insert }}: ${{ parameters.services }}
   continueOnError: $[eq(variables.rust, 'nightly')]
   steps:
     - template: install-rust.yml@templates
       parameters:
         rust: $(rust)
     # Run any user-specific setup steps
     - ${{ parameters.setup }}
     - script: sudo apt-get -y install libudev-dev libusb-1.0-0-dev libdbus-1-dev
       displayName: Install packages
       condition: eq(variables['Agent.OS'], 'Linux')
     - task: AzureKeyVault@1
       displayName: "Retreive Signing Key"
       condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'))
       inputs:
         azureSubscription: "azure-nplabs"
         keyVaultName: "nplabs"
     - task: PowerShell@2
       displayName: 'Setup Signing Key'
       condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'))
       inputs:
         targetType: inline
         script: |
           $kvSecretBytes = [System.Convert]::FromBase64String("$(NPLabsCodeSigningCert202105)")
           $certCollection = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2Collection
           $certCollection.Import($kvSecretBytes,$null,[System.Security.Cryptography.X509Certificates.X509KeyStorageFlags]::Exportable)
           $password = "$(NPLabsRepoSigningKey)"
           $protectedCertificateBytes = $certCollection.Export([System.Security.Cryptography.X509Certificates.X509ContentType]::Pkcs12, $password)
           $pfxPath = "SigningCert.pfx"
           [System.IO.File]::WriteAllBytes($pfxPath, $protectedCertificateBytes)       
     - script: cargo build --release
       displayName: cargo build
       workingDirectory: ffi/
     - task: CopyFiles@2
       displayName: "Copy DLL (Windows NuGet)"
       condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'))       
       inputs:
         contents: "$(System.DefaultWorkingDirectory)/ffi/target/release/*.dll"
         targetFolder: "$(System.DefaultWorkingDirectory)/ffi/nuget/runtimes/win-x64/native"
         flattenFolders: true
         cleanTargetFolder: true
     - task: CopyFiles@2
       displayName: "Copy lib (Windows NuGet)"
       condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'))       
       inputs:
         contents: "$(System.DefaultWorkingDirectory)/ffi/target/release/*.lib"
         targetFolder: "$(System.DefaultWorkingDirectory)/ffi/nuget/runtimes/win-x64/native"
         flattenFolders: true
     - task: CopyFiles@2         
       displayName: "Copy DLL (Windows)"
       condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'))       
       inputs:
         contents: "$(System.DefaultWorkingDirectory)/ffi/target/release/*.dll"
         targetFolder: "$(Build.ArtifactStagingDirectory)"
         flattenFolders: true
     - task: CopyFiles@2         
       displayName: "Copy lib (Windows)"
       condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'))       
       inputs:
         contents: "$(System.DefaultWorkingDirectory)/ffi/target/release/*.lib"
         targetFolder: "$(Build.ArtifactStagingDirectory)"
         flattenFolders: true
     - task: CopyFiles@2
       displayName: "Copy DLL (macOS)"
       condition: and(succeeded(), eq(variables['Agent.OS'], 'Darwin'))
       inputs:
         contents: "$(System.DefaultWorkingDirectory)/ffi/target/release/*.dylib"
         targetFolder: "$(Build.ArtifactStagingDirectory)"
         flattenFolders: true

     - task: CopyFiles@2
       displayName: "Copy DLL (Linux)"
       condition: and(succeeded(), eq(variables['Agent.OS'], 'Linux'))
       inputs:
         contents: "$(System.DefaultWorkingDirectory)/ffi/target/release/*.so"
         targetFolder: "$(Build.ArtifactStagingDirectory)"
         flattenFolders: true
     - task: ArchiveFiles@2
       displayName: "Archive nuget package"
       condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'))
       inputs:
         rootFolderOrFile: "$(System.DefaultWorkingDirectory)/ffi/nuget/"
         archiveType: "zip"
         archiveFile: "$(Build.ArtifactStagingDirectory)/ButtplugRustFFI.2.0.5.nupkg"
         includeRootFolder: false
     - task: PowerShell@2
       displayName: 'Sign Exported Nuget Packages'
       # Only sign on dev/master builds
       condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'))       
       inputs:
         targetType: inline
         script: |
           Get-ChildItem -Path $(Build.ArtifactStagingDirectory) -Filter *.nupkg -Recurse -File -Name| ForEach-Object {
               nuget sign $(Build.ArtifactStagingDirectory)\$_ -CertificatePath SigningCert.pfx -CertificatePassword "$(NPLabsRepoSigningKey)" -Timestamper http://timestamp.comodoca.com/rfc3161
           }
     - task: PublishPipelineArtifact@0
       inputs:
         targetPath: '$(Build.ArtifactStagingDirectory)'
         artifactName: 'artifacts-$(Agent.OS)'       
 - ${{ if ne('', parameters.codecov_token) }}:
   - template: coverage.yml@templates
     parameters:
       token: ${{ parameters.codecov_token }}
       setup: ${{ parameters.setup }}
       services: ${{ parameters.services }}
       env: ${{ parameters.env }}
